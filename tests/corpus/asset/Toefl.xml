<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
	<TestMethod name='filtrate_paper'>
		<TestCase name='testLimit'>
			<Assert method="getjsonvalue" param="code">0</Assert>
			<Assert method="getjsonarraysize" param="data">1</Assert>
			<Assert method="haskeys" param="data.[0]">paperID,paperName,paperGroup,isDeleted,paperType,source,owner,modifier,usage,defaultDuration,difficulty,description,createtime,lastmodifytime,status,examine,is_zhan</Assert>
		</TestCase>
		<TestCase name='testDifficultyLow'>
			<Assert method="getjsonvalue" param="code">0</Assert>
			<Assert method="getjsonvalue" param="data.[0].difficulty">1</Assert>
		</TestCase>
		<TestCase name='testDifficultyMid'>
			<Assert method="getjsonvalue" param="code">0</Assert>
			<Assert method="getjsonvalue" param="data.[0].difficulty">2</Assert>
		</TestCase>
		<TestCase name='testDifficultyHigh'>
			<Assert method="getjsonvalue" param="code">0</Assert>
			<Assert method="getjsonvalue" param="data.[0].difficulty">3</Assert>
		</TestCase>
		<TestCase name='testDifficulty4'>
			<Assert method="getjsonvalue" param="code">0</Assert>
			<Assert method="getjsonvalue" param="data.[0].difficulty">1</Assert>
		</TestCase>
		<TestCase name='testDifficultyInvalid'>
			<Assert method="getjsonvalue" param="message.difficulty.[0]">difficulty must be an integer.</Assert>
		</TestCase>
		<TestCase name='testSourceTPO'>
			<Assert method="getjsonvalue" param="code">0</Assert>
			<Assert method="getjsonvalue" param="data.[0].source">1</Assert>
		</TestCase>
		<TestCase name='testSourceOG'>
			<Assert method="getjsonvalue" param="data.[0].source">4</Assert>
		</TestCase>
		<TestCase name='testSourceNotSupport'>
			<Assert method="getjsonvalue" param="data.[0].source">5</Assert>
		</TestCase>
		<TestCase name='testExcept'>
			<Assert method="getjsonvalue" param="data.[0].paperID" operator="notequal">2</Assert>
			<Assert method="getjsonvalue" param="data.[0].paperID" operator="notequal">1</Assert>
		</TestCase>
		<TestCase name='testRand0'>
			<Assert method="getjsonarraysize" param="data">2</Assert>
		</TestCase>
		<TestCase name='testRand1'>
			<Assert method="getjsonarraysize" param="data">1</Assert>
		</TestCase>
		<TestCase name='testRandInvalid'>
			<Assert method="getjsonvalue" param="message.is_rand.[0]">is_rand must be an integer.</Assert>
		</TestCase>
		<TestCase name='testGroupNull'>
			<Assert method="getjsonarraysize" param="data">1</Assert>
		</TestCase>
		<TestCase name='testGroup1'>
			<Assert method="getjsonvalue" param="data.[0].usage">阶段测试</Assert>
		</TestCase>
		<TestCase name='testGroup2'>
			<Assert method="getjsonvalue" param="data.[0].usage">练习,阶段测试,模考,作业</Assert>
		</TestCase>
		<TestCase name='testGroupInvalid'>
			<Assert method="getjsonvalue" param="message.group_id.[0]">group_id must be an integer.</Assert>
		</TestCase>
		<TestCase name='testBodyNull'>
			<Assert method="haskeys" param="data.[0]">paperID,paperName,paperGroup,isDeleted,paperType,source,owner,modifier,usage,defaultDuration,difficulty,description,createtime,lastmodifytime,status,examine,is_zhan</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_paper_list'>
		<TestCase name='testNobody'>
			<Assert method="getjsonvalue" param="code">0</Assert>
			<Assert method="getjsonarraysize" param="data" operator="greater">2</Assert>
			<Assert method="haskeys" param="data.[0]">paperID,paperName,paperGroup,isDeleted,paperType,source,owner,modifier,usage,defaultDuration,difficulty,description,createtime,lastmodifytime,status,examine,is_zhan,practiced_cnt,listen_avg,read_avg</Assert>
		</TestCase>
		<TestCase name='Group0'>
			<Assert method="getjsonarraysize" param="data" operator="greater">0</Assert>
		</TestCase>
		<TestCase name='Group1'>
			<Assert method="getjsonarraysize" param="data.tpo_list.tpo_group_1" operator="greater">0</Assert>
			<Assert method="getjsonarraysize" param="data.extra_list.extra_group_1" operator="greater">0</Assert>
		</TestCase>
		<TestCase name='GroupInvalid'>
			<Assert method="getjsonvalue" param="message.is_group.[0]">is_group must be an integer.</Assert>
		</TestCase>
		<TestCase name='Group99'>
			<Assert method="getjsonarraysize" param="data.tpo_list.tpo_group_1" operator="greater">0</Assert>
		</TestCase>
		<TestCase name='source1'>
			<Assert method="getjsonvalue" param="data.[0].source">1</Assert>
		</TestCase>
		<TestCase name='source4'>
			<Assert method="getjsonvalue" param="data.[0].source">4</Assert>
		</TestCase>
		<TestCase name='sourceInvalid'>
			<Assert method="getjsonvalue" param="message.source.[0]">source must be an integer.</Assert>
		</TestCase>
		<TestCase name='source99'>
			<Assert method="getjsonvalue" param="data">[]</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_paper_detail'>
		<TestCase name='output'>
			<Assert method="haskeys" param="data">paper,ques_num,article_list</Assert>
			<Assert method="getjsonvalue" param="data.paper.[0].paperID">1</Assert>
		</TestCase>
		<TestCase name='paperidInvalid'>
			<Assert method="getjsonvalue" param="message.paperID.[0]">paperID must be an integer.</Assert>
		</TestCase>
		<TestCase name='paperidNull'>
			<Assert method="getjsonvalue" param="message.paperID.[0]">paperID cannot be blank.</Assert>
		</TestCase>
		<TestCase name='paperidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"paper":[],"ques_num":[],"article_list":[]}}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_article_list'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.[0].article_label_id">172</Assert>
			<Assert method="haskeys" param="data.[0]">articleID,paperID,article_label_id,labelname,btype,phaseid,title,titleTranslation,difficulty,paperName,ques_num,practiced_count,right_num,right_rate</Assert>
		</TestCase>
		<TestCase name='labelid'>
			<Assert method="getjsonvalue" param="data.[0].article_label_id">172</Assert>
		</TestCase>
		<TestCase name='labelids'>
			<Assert method="getjsonarraysize" param="data" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='labelidNull'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
		<TestCase name='labelidsNull'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
		<TestCase name='labelidNotExist'>
			<Assert method="getjsonvalue" param="data">[]</Assert>
		</TestCase>
		<TestCase name='labelidsNotExist'>
			<Assert method="getjsonvalue" param="data">[]</Assert>
		</TestCase>
		<TestCase name='labelidInvalid'>
			<Assert method="getjsonvalue" param="message.labelID.[0]">labelID must be an integer.</Assert>
		</TestCase>
		<TestCase name='labelidsInvalid'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
		<TestCase name='btype1'>
			<Assert method="getjsonvalue" param="data.[0].btype">1</Assert>
		</TestCase>
		<TestCase name='btype4'>
			<Assert method="getjsonvalue" param="data.[0].btype">4</Assert>
		</TestCase>
		<TestCase name='btypeInvalid'>
			<Assert method="getjsonvalue" param="message.btype.[0]">btype must be an integer.</Assert>
		</TestCase>
		<TestCase name='btypeNotExist'>
			<Assert method="getjsonarraysize" param="data" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='source1'>
			<Assert method="getjsonarraysize" param="data" operator="greater">0</Assert>
		</TestCase>
		<TestCase name='source4'>
			<Assert method="getjsonarraysize" param="data" operator="greater">0</Assert>
		</TestCase>
		<TestCase name='source5'>
			<Assert method="getjsonarraysize" param="data" operator="greater">0</Assert>
		</TestCase>
		<TestCase name='sourceInvalid'>
			<Assert method="getjsonarraysize" param="data" operator="greater">0</Assert>
		</TestCase>
		<TestCase name='sourceNotExist'>
			<Assert method="getjsonarraysize" param="data" operator="greater">0</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_article_detail'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.articleID">1312</Assert>
			<Assert method="getjsonarraysize" param="data.paragraph_list" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='articleidNull'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
		<TestCase name='articleidNotExist'>
			<Assert method="getjsonvalue" param="data.ques_num">0</Assert>
		</TestCase>
		<TestCase name='articleidInvalid'>
			<Assert method="getjsonvalue" param="message.articleID.[0]">articleID must be an integer.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_article_ques'>
		<TestCase name='output'>
			<Assert method="getjsonarraysize" param="data" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='articleidNull'>
			<Assert method="getjsonvalue" param="message.articleID.[0]">articleID cannot be blank.</Assert>
		</TestCase>
		<TestCase name='articleidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='articleidInvalid'>
			<Assert method="getjsonvalue" param="message.articleID.[0]">articleID must be an integer.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='filtrate_ques'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.[0].paperID">2</Assert>
			<Assert method="getjsonvalue" param="data.[0].labelid">4</Assert>
			<Assert method="haskeys" param="data.[0]">questionID,btype,ques_type,paperID,seqno,questionContent,choiceA,choiceB,choiceC,choiceD,choiceE,choiceF,choiceG,choiceH,key1,key2,key3,key4,key5,key6,answer,analysis,lecturetime,questionaudiourl,repeataudiourl,listenRepeat,analysisDetail,startPoint,endPoint,analysis_A,analysis_B,analysis_C,analysis_D,analysis_E,analysis_F,analysis_G,analysis_H,brief_analysis,composite_analysis,paragraphID,relatedParagraph,prepareTime,limitTime,highlight,highlightindex,direction,difficulty,accuracy,usage,createtime,lastupdatetime,modifier,ques_type_analysis,signal_word,exam_point,exam_point_analysis,step_solve_ques,gen_ques_point,note_example,id,labelid,topicid,articleID,article_label_id,phaseid,paragraphIndex,paragraphDetail,translation,yu_duan,dialogPara,dialogOrigin,audiourl,directionaudiourl,questionbeforeaudiourl,questiondialogaudiourl,questionqdaudiourl,answeraudiourl,during_time,default_time,paperName,paperGroup,isDeleted,paperType,source,owner,defaultDuration,description,lastmodifytime,status,examine,is_zhan</Assert>
		</TestCase>
		<TestCase name='ques_biz_typeNull'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
		<TestCase name='ques_biz_typeNotExist'>
			<Assert method="getjsonvalue" param="data">[]</Assert>
		</TestCase>
		<TestCase name='paperID1'>
			<Assert method="getjsonvalue" param="data.[0].paperID">1</Assert>
			<Assert method="getjsonvalue" param="data.[0].labelid">4</Assert>
		</TestCase>
		<TestCase name='paperIDNull'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
		<TestCase name='paperIDNotExist'>
			<Assert method="getjsonvalue" param="data">[]</Assert>
		</TestCase>
		<TestCase name='difficulty1'>
			<Assert method="getjsonvalue" param="data.[0].difficulty">1</Assert>
		</TestCase>
		<TestCase name='difficulty2'>
			<Assert method="getjsonvalue" param="data.[0].difficulty">2</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_ques_type_list'>
		<TestCase name='output'>
			<Assert method="haskeys" param="data.[0]">id,btype,ques_type_name,comment,status</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_ques'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.ques.[0].btype">1</Assert>
			<Assert method="getjsonvalue" param="data.ques.[0].difficulty">1</Assert>
			<Assert method="haskeys" param="data.ques.[0]">paperName,phaseid,questionID,btype,ques_type,paperID,seqno,questionContent,choiceA,choiceB,choiceC,choiceD,choiceE,choiceF,choiceG,choiceH,key1,key2,key3,key4,key5,key6,answerTran,answer,analysis,lecturetime,questionaudiourl,repeataudiourl,content,listenRepeat,analysisDetail,startPoint,endPoint,analysis_A,analysis_B,analysis_C,analysis_D,analysis_E,analysis_F,analysis_G,analysis_H,brief_analysis,composite_analysis,topicID,paragraphID,relatedParagraph,prepareTime,limitTime,highlight,highlightindex,direction,difficulty,accuracy,usage,createtime,lastupdatetime,modifier,ques_type_analysis,signal_word,exam_point,exam_point_analysis,step_solve_ques,gen_ques_point,note_example,articleID,time_avg,label,paragraph_detail,paragraph_translation</Assert>
		</TestCase>
		<TestCase name='sourceNull'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
		<TestCase name='source1'>
			<Assert method="getjsonvalue" param="data.ques.[0].paperName">tpo1</Assert>
		</TestCase>
		<TestCase name='source4'>
			<Assert method="getjsonvalue" param="data.ques.[0].paperName">OG1</Assert>
		</TestCase>
		<TestCase name='source5'>
			<Assert method="getjsonvalue" param="data.ques">[]</Assert>
		</TestCase>
		<TestCase name='sourceOnly'>
			<Assert method="getjsonarraysize" param="data.ques" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='difficulty2'>
			<Assert method="getjsonvalue" param="data.ques.[0].difficulty">2</Assert>
		</TestCase>
		<TestCase name='difficultyNotExist'>
			<Assert method="getjsonvalue" param="data.ques">[]</Assert>
		</TestCase>
		<TestCase name='difficultyInvalid'>
			<Assert method="getjsonvalue" param="data.ques.[0].difficulty">2</Assert>
		</TestCase>
		<TestCase name='btype4'>
			<Assert method="getjsonvalue" param="data.ques.[0].btype">4</Assert>
		</TestCase>
		<TestCase name='btypeNotExist'>
			<Assert method="getjsonvalue" param="data.ques">[]</Assert>
		</TestCase>
		<TestCase name='btypeInvalid'>
			<Assert method="getjsonvalue" param="message.btype.[0]">btype must be an integer.</Assert>
		</TestCase>
		<TestCase name='labelSingle'>
			<Assert method="getjsonvalue" param="data.ques.[0].labelid">25</Assert>
		</TestCase>
		<TestCase name='labelMulti'>
			<Assert method="getjsonarraysize" param="data.ques" operator="greater">2</Assert>
		</TestCase>
		<TestCase name='labelNotExist'>
			<Assert method="getjsonvalue" param="data.ques">[]</Assert>
		</TestCase>
		<TestCase name='quesSingle'>
			<Assert method="getjsonvalue" param="data.[0].questionID">104456</Assert>
		</TestCase>
		<TestCase name='quesMulti'>
			<Assert method="getjsonarraysize" param="data">2</Assert>
		</TestCase>
		<TestCase name='quesNotExist'>
			<Assert method="getjsonvalue" param="data">[]</Assert>
		</TestCase>
		<TestCase name='paperid'>
			<Assert method="getjsonvalue" param="data.ques.[0].paperID">1</Assert>
		</TestCase>
		<TestCase name='paperidInvalid'>
			<Assert method="getjsonvalue" param="message.paper_id.[0]">paper_id must be an integer.</Assert>
		</TestCase>
		<TestCase name='paperidNotExist'>
			<Assert method="getjsonvalue" param="data.ques">[]</Assert>
		</TestCase>
		<TestCase name='phaseid'>
			<Assert method="getjsonvalue" param="data.ques.[0].phaseid">2</Assert>
		</TestCase>
		<TestCase name='phaseidInvalid'>
			<Assert method="getjsonvalue" param="data.ques.[0].phaseid">1</Assert>
		</TestCase>
		<TestCase name='phaseidNotExist'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='offset'>
			<Assert method="getjsonarraysize" param="data.ques">2</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='error_ques_top'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":[{"ranking":1,"paper_id":"81","paper_name":"tpo51","btype":"1","article_id":"1295","phaseid":"1","topic_id":"111906","ques_id":"111906","seqno":"7"},{"ranking":2,"paper_id":"81","paper_name":"tpo51","btype":"1","article_id":"1296","phaseid":"2","topic_id":"111917","ques_id":"111917","seqno":"14"},{"ranking":3,"paper_id":"81","paper_name":"tpo51","btype":"1","article_id":"1295","phaseid":"1","topic_id":"111896","ques_id":"111896","seqno":"3"},{"ranking":4,"paper_id":"81","paper_name":"tpo51","btype":"1","article_id":"1295","phaseid":"1","topic_id":"111911","ques_id":"111911","seqno":"10"},{"ranking":5,"paper_id":"81","paper_name":"tpo51","btype":"1","article_id":"1295","phaseid":"1","topic_id":"111918","ques_id":"111918","seqno":"14"},{"ranking":6,"paper_id":"81","paper_name":"tpo51","btype":"1","article_id":"1295","phaseid":"1","topic_id":"111903","ques_id":"111903","seqno":"6"},{"ranking":7,"paper_id":"81","paper_name":"tpo51","btype":"1","article_id":"1297","phaseid":"3","topic_id":"111930","ques_id":"111930","seqno":"12"},{"ranking":8,"paper_id":"81","paper_name":"tpo51","btype":"1","article_id":"1295","phaseid":"1","topic_id":"111909","ques_id":"111909","seqno":"8"}]}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_ques_by_topicid'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.[0].paperName">tpo1</Assert>
			<Assert method="getjsonvalue" param="data.[0].topicID">1</Assert>
		</TestCase>
		<TestCase name='topicidMulti'>
			<Assert method="getjsonvalue" param="data.[1].topicID">2</Assert>
			<Assert method="getjsonvalue" param="data.[0].topicID">1</Assert>
		</TestCase>
		<TestCase name='topicidNotExist'>
			<Assert method="getjsonvalue" param="data">[]</Assert>
		</TestCase>
		<TestCase name='topicidNull'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='biz_ques_classify'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":{"scope":{"1":1,"2":0,"0":1},"diff":{"1":1,"2":1,"3":1},"num":{"5":1,"10":1,"20":1},"tpo":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"extra":1}}}</Assert>
		</TestCase>
		<TestCase name='input'>
			<Assert>{"code":0,"message":"OK","data":{"scope":{"1":1,"2":0,"0":1},"diff":{"1":1,"2":1,"3":1},"num":{"5":1,"10":1,"20":1},"tpo":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"extra":1}}}</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"scope":{"1":1,"2":0,"0":1},"diff":{"1":1,"2":1,"3":1},"num":{"5":1,"10":1,"20":1},"tpo":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"extra":1}}}</Assert>
		</TestCase>
		<TestCase name='labelidNull'>
			<Assert method="getjsonvalue" param="message.ques_biz_label_id.[0]">ques_biz_label_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='labelidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"scope":{"1":0,"2":0,"0":1},"diff":{"1":0,"2":0,"3":0},"num":{"5":0,"10":0,"20":0},"tpo":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"extra":0}}}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_topic_avg_count'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":[{"topic_id":"1","amount_num":"14509","right_num":"6571","right_rate":"0.4529","time_avg":"250"},{"topic_id":"2","amount_num":"11870","right_num":"7778","right_rate":"0.6553","time_avg":"80"}]}</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="message.app_id.[0]">app_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[{"topic_id":"1","amount_num":"14509","right_num":"6571","right_rate":"0.4529","time_avg":"250"},{"topic_id":"2","amount_num":"11870","right_num":"7778","right_rate":"0.6553","time_avg":"80"}]}</Assert>
		</TestCase>
		<TestCase name='btypeNull'>
			<Assert method="getjsonvalue" param="message.btype.[0]">btype cannot be blank.</Assert>
		</TestCase>
		<TestCase name='btypeNotExist'>
			<Assert>{"code":0,"message":"OK","data":[{"topic_id":"1","amount_num":"14509","right_num":"6571","right_rate":"0.4529","time_avg":"250"},{"topic_id":"2","amount_num":"11870","right_num":"7778","right_rate":"0.6553","time_avg":"80"}]}</Assert>
		</TestCase>
		<TestCase name='topicidNull'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='topicidNotExist'>
			<Assert method="getjsonvalue" param="data.[0].topic_id">-999</Assert>
		</TestCase>
		<TestCase name='topicidSingle'>
			<Assert>{"code":0,"message":"OK","data":[{"topic_id":"1","amount_num":"14509","right_num":"6571","right_rate":"0.4529","time_avg":"250"}]}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_label_list'>
		<TestCase name='output'>
			<Assert method="haskeys" param="data">subject_classify,ques_biz_type</Assert>
		</TestCase>
		<TestCase name='btype2'>
			<Assert method="haskeys" param="data">dialogue,lecture</Assert>
		</TestCase>
		<TestCase name='btype3'>
			<Assert method="haskeys" param="data">task1,task2,task3,task4,task5,task6</Assert>
		</TestCase>
		<TestCase name='btype4'>
			<Assert method="haskeys" param="data">integrated_writing,independent_writing</Assert>
		</TestCase>
		<TestCase name='btype0'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
		<TestCase name='btypeNull'>
			<Assert method="getjsonvalue" param="message">未知错误</Assert>
		</TestCase>
		<TestCase name='btypeInvalid'>
			<Assert method="getjsonvalue" param="message.btype.[0]">btype must be an integer.</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="haskeys" param="data">subject_classify,ques_biz_type</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert method="haskeys" param="data">subject_classify,ques_biz_type</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='select_label'>
		<TestCase name='output'>
			<Assert method="haskeys" param="data">subject_classify,ques_type</Assert>
		</TestCase>
		<TestCase name='btype2'>
			<Assert method="haskeys" param="data">ques_type,lecture,conversation</Assert>
		</TestCase>
		<TestCase name='btype3'>
			<Assert method="haskeys" param="data">task1,task2,task3,task4,task5,task6</Assert>
		</TestCase>
		<TestCase name='btype4'>
			<Assert method="haskeys" param="data">integrated_writing,independent_writing</Assert>
		</TestCase>
		<TestCase name='btype0'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='btypeNull'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='btypeInvalid'>
			<Assert method="getjsonvalue" param="message.btype.[0]">btype must be an integer.</Assert>
		</TestCase>
		<TestCase name='difficultyMulti'>
			<Assert method="haskeys" param="data">subject_classify,ques_type</Assert>
		</TestCase>
		<TestCase name='difficultyNull'>
			<Assert method="haskeys" param="data">subject_classify,ques_type</Assert>
		</TestCase>
		<TestCase name='difficultyNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='source4'>
			<Assert method="haskeys" param="data">subject_classify,ques_type</Assert>
		</TestCase>
		<TestCase name='sourceNull'>
			<Assert method="haskeys" param="data">subject_classify,ques_type</Assert>
		</TestCase>
		<TestCase name='sourceNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='article_label_summary'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":{"importance":"0","practiced_count":"39894","right_num":"26769","avg_right_rate":0.671}}</Assert>
		</TestCase>
		<TestCase name='labelidNull'>
			<Assert method="getjsonvalue" param="message.label_id.[0]">label_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='labelidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"importance":null,"practiced_count":null,"right_num":null,"avg_right_rate":0}}</Assert>
		</TestCase>
		<TestCase name='labelidInvalid'>
			<Assert method="getjsonvalue" param="message.label_id.[0]">label_id must be an integer.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='gen_toefl_workflow_id'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.workflow" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="message.app_id.[0]">app_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='scenarioNull'>
			<Assert method="getjsonvalue" param="message.scenario.[0]">scenario cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='practicetypeNull'>
			<Assert method="getjsonvalue" param="message.practice_type.[0]">practice_type cannot be blank.</Assert>
		</TestCase>
		<TestCase name='paperidNull'>
			<Assert method="getjsonvalue" param="message.paper_id.[0]">paper_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='articleidNull'>
			<Assert method="getjsonvalue" param="message.article_id.[0]">article_id cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='update_toefl_workflow'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='workflowidNull'>
			<Assert method="getjsonvalue" param="message.workflow_id.[0]">workflow_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='workflowidNotExist'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='statusNull'>
			<Assert method="getjsonvalue" param="message.status.[0]">status cannot be blank.</Assert>
		</TestCase>
		<TestCase name='statusInvalid'>
			<Assert method="getjsonvalue" param="message.status.[0]">status must be an integer.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_toefl_workflow_detail'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.workflow_id">6757328</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="data.workflow_id">6757328</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert method="getjsonvalue" param="data.workflow_id">6757328</Assert>
		</TestCase>
		<TestCase name='workflowidNull'>
			<Assert method="getjsonvalue" param="message.workflow_id.[0]">workflow_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='workflowidNotExist'>
			<Assert>{"code":0,"message":"OK","data":null}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='del_workflow'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='workflowidNull'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='workflowidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='workflowidMulti'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='save_article_practice'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.id" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='scenarioNull'>
			<Assert method="getjsonvalue" param="message.scenario.[0]">scenario cannot be blank.</Assert>
		</TestCase>
		<TestCase name='workflowidNull'>
			<Assert method="getjsonvalue" param="message.workflow_id.[0]">workflow_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='articleidNull'>
			<Assert method="getjsonvalue" param="message.article_id.[0]">article_id cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='save_paper_practice'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.id" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="data.id" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='workflowidNull'>
			<Assert method="getjsonvalue" param="message.workflow_id.[0]">workflow_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='paperidNull'>
			<Assert method="getjsonvalue" param="message.paper_id.[0]">paper_id cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_paper_practice'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.workflow_id">6760459</Assert>
			<Assert method="getjsonvalue" param="data.p_uid">4528012</Assert>
			<Assert method="getjsonvalue" param="data.paper_id">55</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='workflowidNull'>
			<Assert method="getjsonvalue" param="message.workflow_id.[0]">workflow_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='paperidNull'>
			<Assert method="getjsonvalue" param="message.paper_id.[0]">paper_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":null}</Assert>
		</TestCase>
		<TestCase name='workflowidNotExist'>
			<Assert>{"code":0,"message":"OK","data":null}</Assert>
		</TestCase>
		<TestCase name='paperidNotExist'>
			<Assert method="getjsonvalue" param="data.workflow_id">6760459</Assert>
			<Assert method="getjsonvalue" param="data.p_uid">4528012</Assert>
			<Assert method="getjsonvalue" param="data.paper_id">55</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_practice_status'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":[{"paper_id":"80","workflow_id":"6755752","status":"0","read_score":null,"listen_score":null,"updatetime":"2017-11-11 17:37:59"}]}</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='paperidNull'>
			<Assert method="getjsonvalue" param="message.paper_id.[0]">paper_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='paperidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='paperidMulti'>
			<Assert method="getjsonarraysize" param="data">2</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="message.app_id.[0]">app_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[{"paper_id":"80","workflow_id":"6755752","status":"0","read_score":null,"listen_score":null,"updatetime":"2017-11-11 17:37:59"}]}</Assert>

		</TestCase>
	</TestMethod>
	<TestMethod name='breakpoint_practice'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":{"workflow_id":"6754756","paper_id":"45","p_uid":"1344149","scenario":"11","status":"0","phase_id":null,"btype":null,"latest_ques_id":null,"latest_topic_id":null,"latest_ques_seqno":null,"article_id":null,"article_status":"0"}}</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"workflow_id":null}}</Assert>
		</TestCase>
		<TestCase name='paperidNull'>
			<Assert method="getjsonvalue" param="message.paper_id.[0]">paper_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='paperidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"workflow_id":null}}</Assert>
		</TestCase>
		<TestCase name='btypeNull'>
			<Assert method="getjsonvalue" param="message.btype.[0]">btype cannot be blank.</Assert>
		</TestCase>
		<TestCase name='scenarioNull'>
			<Assert method="getjsonvalue" param="message.scenario.[0]">scenario cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='article_breakpoint_practice'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.article_id">1225</Assert>
			<Assert method="getjsonvalue" param="data.p_uid">1325047</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"workflow_id":null,"workflow_is_exist":0}}</Assert>
		</TestCase>
		<TestCase name='articleidNull'>
			<Assert method="getjsonvalue" param="message.article_id.[0]">article_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='articleidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"workflow_id":null,"workflow_is_exist":0}}</Assert>
		</TestCase>
		<TestCase name='scenarioNull'>
			<Assert method="getjsonvalue" param="message.scenario.[0]">scenario cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='last_article_practice_summary'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":[{"article_id":"1295","total":14,"finished_nums":14,"wrong_nums":8,"right_ques_num":6,"workflow_id":"6755797","status":"2"}]}</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='articleidNull'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='articleidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='scenarioNull'>
			<Assert method="getjsonvalue" param="message.scenario.[0]">scenario cannot be blank.</Assert>
		</TestCase>
		<TestCase name='scenarioNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='paramMulti'>
			<Assert>{"code":0,"message":"OK","data":[{"article_id":"1295","total":14,"finished_nums":14,"wrong_nums":8,"right_ques_num":6,"workflow_id":"6755797","status":"2"},{"article_id":"1294","total":1,"finished_nums":1,"wrong_nums":1,"right_ques_num":0,"workflow_id":"6755720","status":"2"}]}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_practice_result'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.answer_result_list.[0].scenario">13</Assert>
			<Assert method="getjsonvalue" param="data.answer_result_list.[0].p_uid">1325047</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="data.p_uid">-9999</Assert>
		</TestCase>
		<TestCase name='articleidNull'>
			<Assert method="getjsonvalue" param="message.article_id.[0]">article_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='articleidNotExist'>
			<Assert method="getjsonvalue" param="data.article_id">-9999</Assert>
		</TestCase>
		<TestCase name='scenarioNull'>
			<Assert method="getjsonvalue" param="data.answer_result_list.[0].scenario">13</Assert>
		</TestCase>
		<TestCase name='scenarioNotExist'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='workflowidNull'>
			<Assert method="getjsonvalue" param="message.workflow_id.[0]">workflow_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='workflowidNotExist'>
			<Assert method="getjsonvalue" param="data.workflow_id">-9999</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_answer_by_workflow'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.answer.[0].practice_id">6757248</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"answer":[],"paper":null}}</Assert>
		</TestCase>
		<TestCase name='workflowidNull'>
			<Assert method="getjsonvalue" param="message.workflow_id.[0]">workflow_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='workflowidNotExist'>
			<Assert method="getjsonarraysize" param="data.answer" operator="greater">1</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='topic_practice_history'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":{"list":[{"id":"46111","practice_id":"6757514","scenario":"13","paper_id":"80","tpo_no":null,"phase_id":"2","ques_no":"14","ques_id":"111834","p_uid":"1325047","tmp_id":"3696853","guid":null,"subspecialization":"1","test_type":"1","is_official":"1","is_jj":null,"answer":null,"answer_ext":null,"result":"1","practice_datetime":"2017-12-25 23:28:42","used_time":"23","practice_ip_addr":"10.165.14.79","practice_mac_addr":null,"retry_times":null,"server_ip":null,"app_id":"beikao","is_new_resource":"1","create_datetime":"2017-12-25 23:28:38","update_datetime":null,"status":"0","topic_id":"111834"}]}}</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"list":[null]}}</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="message.app_id.[0]">app_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"list":[{"id":"46111","practice_id":"6757514","scenario":"13","paper_id":"80","tpo_no":null,"phase_id":"2","ques_no":"14","ques_id":"111834","p_uid":"1325047","tmp_id":"3696853","guid":null,"subspecialization":"1","test_type":"1","is_official":"1","is_jj":null,"answer":null,"answer_ext":null,"result":"1","practice_datetime":"2017-12-25 23:28:42","used_time":"23","practice_ip_addr":"10.165.14.79","practice_mac_addr":null,"retry_times":null,"server_ip":null,"app_id":"beikao","is_new_resource":"1","create_datetime":"2017-12-25 23:28:38","update_datetime":null,"status":"0","topic_id":"111834"}]}}</Assert>
		</TestCase>
		<TestCase name='articleidNull'>
			<Assert method="getjsonvalue" param="message.article_id.[0]">article_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='articleidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"list":[null]}}</Assert>
		</TestCase>
		<TestCase name='scenarioNull'>
			<Assert>{"code":0,"message":"OK","data":{"list":[null]}}</Assert>
		</TestCase>
		<TestCase name='scenarioNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"list":[null]}}</Assert>
		</TestCase>
		<TestCase name='topicidNull'>
			<Assert method="getjsonvalue" param="message.topic_id.[0]">topic_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='topicidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"list":[{"practice_datetime":"2017-12-25 23:28:42","practice_id":"6757514","answer":null,"app_id":"beikao"}]}}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_answer_by_topic_id'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.[0].p_uid">1344613</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='topicidNull'>
			<Assert method="getjsonvalue" param="message.topic_ids.[0]">topic_ids cannot be blank.</Assert>
		</TestCase>
		<TestCase name='topicidNotExist'>
			<Assert>{"code":0,"message":"OK","data":[]}</Assert>
		</TestCase>
		<TestCase name='topicidSingle'>
			<Assert>{"code":0,"message":"OK","data":[{"id":"43720","practice_id":"6757054","scenario":"14","paper_id":"1","tpo_no":null,"phase_id":"1","ques_no":"2","ques_id":"104453","p_uid":"1344613","tmp_id":"3701794","guid":null,"subspecialization":"1","test_type":"1","is_official":"1","is_jj":null,"answer":"C","answer_ext":null,"result":"0","practice_datetime":"2017-11-29 14:01:51","used_time":"4","practice_ip_addr":"10.165.14.79","practice_mac_addr":null,"retry_times":null,"server_ip":null,"app_id":"beikao","is_new_resource":"1","create_datetime":"2017-11-29 14:01:48","update_datetime":null,"status":"0","topic_id":"2"}]}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='article_practice_count'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":{"id":1}}</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="message.app_id.[0]">app_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert method="getjsonvalue" param="data.id" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='articleidNull'>
			<Assert method="getjsonvalue" param="message.article_id.[0]">article_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='articleidNotExist'>
			<Assert>{"code":0,"message":"OK","data":0}</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_practice_list'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.list.[0].p_uid">1325047</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="message.app_id.[0]">app_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert method="getjsonvalue" param="data.list.[0].p_uid">1325047</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"list":[],"count":"0"}}</Assert>
		</TestCase>
		<TestCase name='practicetypeNull'>
			<Assert method="getjsonvalue" param="data.list.[0].p_uid">1325047</Assert>
		</TestCase>
		<TestCase name='practicetypeNotExist'>
			<Assert method="getjsonvalue" param="data.list.[0].p_uid">1325047</Assert>
		</TestCase>
		<TestCase name='scenarioNull'>
			<Assert method="getjsonarraysize" param="data.list">10</Assert>
		</TestCase>
		<TestCase name='scenarioNotExist'>
			<Assert>{"code":0,"message":"OK","data":{"list":[],"count":"0"}}</Assert>
		</TestCase>
		<TestCase name='daylimit'>
			<Assert>{"code":0,"message":"OK","data":{"list":[],"count":"0"}}</Assert>
		</TestCase>
		<TestCase name='limit'>
			<Assert method="getjsonarraysize" param="data.list">1</Assert>
			<Assert method="getjsonvalue" param="data.count" operator="greater">10</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='get_biz_practice_count'>
		<TestCase name='output'>
			<Assert method="getjsonvalue" param="data.p_uid">1325047</Assert>
			<Assert method="getjsonvalue" param="data.ques_biz_label_id">2</Assert>
			<Assert method="haskeys" param="data">id,p_uid,student_id,ques_biz_label_id,app_id,nums,intelligence_right_rate,level,previous_level,previous_right_rate,createtime,updatetime</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="message.app_id.[0]">app_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert method="getjsonvalue" param="data.p_uid">1325047</Assert>
			<Assert method="getjsonvalue" param="data.ques_biz_label_id">2</Assert>
			<Assert method="haskeys" param="data">id,p_uid,student_id,ques_biz_label_id,app_id,nums,intelligence_right_rate,level,previous_level,previous_right_rate,createtime,updatetime</Assert>
		</TestCase>
		<TestCase name='labelidNull'>
			<Assert method="getjsonvalue" param="message.ques_biz_label_id.[0]">ques_biz_label_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='labelidNotExist'>
			<Assert method="getjsonvalue" param="data.ques_biz_label_id">-99</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="data.p_uid">-999</Assert>
			<Assert method="getjsonvalue" param="data.ques_biz_label_id">2</Assert>
			<Assert method="haskeys" param="data">id,p_uid,student_id,ques_biz_label_id,app_id,nums,intelligence_right_rate,level,previous_level,previous_right_rate,createtime,updatetime</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='save_biz_practice_count'>
		<TestCase name='output'>
			<Assert>{"code":0,"message":"OK","data":{"effected_id":11}}</Assert>
		</TestCase>
		<TestCase name='appidNull'>
			<Assert method="getjsonvalue" param="message.app_id.[0]">app_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='appidNotExist'>
			<Assert method="getjsonvalue" param="data.effected_id" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='labelidNull'>
			<Assert method="getjsonvalue" param="message.ques_biz_label_id.[0]">ques_biz_label_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='labelidNotExist'>
			<Assert method="getjsonvalue" param="data.effected_id" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="data.effected_id" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='levelNull'>
			<Assert method="getjsonvalue" param="data.effected_id" operator="greater">1</Assert>
		</TestCase>
		<TestCase name='levelNotExist'>
			<Assert method="getjsonvalue" param="data.effected_id" operator="greater">1</Assert>
		</TestCase>
	</TestMethod>
</TestSuite>