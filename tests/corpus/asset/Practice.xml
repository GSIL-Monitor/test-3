<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
	<TestMethod name='wrong_list'>
		<TestCase name='testtoefl'>
			<Assert method="haskeys" param="data.list.[0]">id,paper_id,test_type,topicID,ques_id,p_uid,is_conquer,app_id,scenario,practice_id,labelname,paperName,seqno,phaseid,btype,practice_datetime,article_id,paper_name</Assert>
			<Assert method="getjsonarraysize" param="data.list">1</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].p_uid">1494415</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].test_type">1</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].btype">1</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].is_conquer">0</Assert>
		</TestCase>
		<TestCase name='testsubject'>
			<Assert method="getjsonvalue" param="data.list.[0].btype">2</Assert>
		</TestCase>
		<TestCase name='testconquer'>
			<Assert method="getjsonvalue" param="data.list.[0].is_conquer">1</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonarraysize" param="data.list">0</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='testtypeNull'>
			<Assert method="getjsonvalue" param="message.test_type.[0]">test_type cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='del_wrong_list'>
		<TestCase name='idssingle'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='idsmulti'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='idsNotExist'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='idsNull'>
			<Assert method="getjsonvalue" param="message.ids.[0]">ids cannot be blank.</Assert>
		</TestCase>
		<TestCase name='testtypeNull'>
			<Assert method="getjsonvalue" param="message.test_type.[0]">test_type cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='multi_ques_practice_list_vip'>
		<TestCase name='test'>
			<Assert method="getjsonvalue" param="data.[0].test_type">2</Assert>
			<Assert method="getjsonvalue" param="data.[0].scenario">20</Assert>
			<Assert method="getjsonvalue" param="data.[0].practice_id">140163</Assert>
			<Assert method="getjsonvalue" param="data.[0].g_uid">223876f6-26e6-41a7-bd99-0322e1b5a69d</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="data">[]</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.g_uid.[0]">g_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='idsNull'>
			<Assert method="getjsonvalue" param="message.ques_ids.[0]">ques_ids cannot be blank.</Assert>
		</TestCase>
		<TestCase name='testtypeNull'>
			<Assert method="getjsonvalue" param="message.test_type.[0]">test_type cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='practice_history'>
		<TestCase name='test'>
			<Assert method="getjsonvalue" param="data.list.[0].test_type">1</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].scenario">12</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].is_new_resource">1</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].p_uid">1324802</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].ques_id">111816</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].paper_id">80</Assert>
			<Assert method="getjsonarraysize" param="data.list">1</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="data.count">0</Assert>
			<Assert method="getjsonvalue" param="data.list">[]</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='idsNull'>
			<Assert method="getjsonvalue" param="message.ques_id.[0]">ques_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='testtypeNull'>
			<Assert method="getjsonvalue" param="message.test_type.[0]">test_type cannot be blank.</Assert>
		</TestCase>
		<TestCase name='isnewresourceNull'>
			<Assert method="getjsonvalue" param="message.is_new_resource.[0]">is_new_resource cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='list'>
		<TestCase name='test'>
			<Assert method="getjsonvalue" param="data.list.[0].test_type">1</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].scenario">12</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].p_uid">1324802</Assert>
			<Assert method="getjsonarraysize" param="data.list">1</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="data.count">0</Assert>
			<Assert method="getjsonvalue" param="data.list">[]</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='testtypeNull'>
			<Assert method="getjsonvalue" param="message.test_type.[0]">test_type cannot be blank.</Assert>
		</TestCase>
		<TestCase name='offsetNull'>
			<Assert method="getjsonvalue" param="message.offset.[0]">offset cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='add'>
		<TestCase name='test'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='testtypeNull'>
			<Assert method="getjsonvalue" param="message.test_type.[0]">test_type cannot be blank.</Assert>
		</TestCase>
		<TestCase name='targetidNull'>
			<Assert method="getjsonvalue" param="message.target_id.[0]">target_id cannot be blank.</Assert>
		</TestCase>
		<TestCase name='targettypeNull'>
			<Assert method="getjsonvalue" param="message.target_type.[0]">target_type cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='favlist'>
		<TestCase name='test'>
			<Assert method="getjsonarraysize" param="data.list">1</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].p_uid">1324802</Assert>
			<Assert method="getjsonvalue" param="data.list.[0].btype">1</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="data.count">0</Assert>
			<Assert method="getjsonvalue" param="data.list">[]</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='testtypeNull'>
			<Assert method="getjsonvalue" param="message.test_type.[0]">test_type cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='status'>
		<TestCase name='idSingle'>
			<Assert method="getjsonvalue" param="data.[0].target_id">5</Assert>
		</TestCase>
		<TestCase name='idMulti'>
			<Assert method="getjsonvalue" param="data.[0].target_id">1517</Assert>
			<Assert method="getjsonvalue" param="data.[1].target_id">5</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="data">{}</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='testtypeNull'>
			<Assert method="getjsonvalue" param="message.test_type.[0]">test_type cannot be blank.</Assert>
		</TestCase>
		<TestCase name='targetidsNull'>
			<Assert method="getjsonvalue" param="message.target_ids.[0]">target_ids cannot be blank.</Assert>
		</TestCase>
		<TestCase name='targettypeNull'>
			<Assert method="getjsonvalue" param="message.target_type.[0]">target_type cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='del'>
		<TestCase name='idSingle'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='idMulti'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='puidNull'>
			<Assert method="getjsonvalue" param="message.p_uid.[0]">p_uid cannot be blank.</Assert>
		</TestCase>
		<TestCase name='testtypeNull'>
			<Assert method="getjsonvalue" param="message.test_type.[0]">test_type cannot be blank.</Assert>
		</TestCase>
		<TestCase name='targetidsNull'>
			<Assert method="getjsonvalue" param="message.target_ids.[0]">target_ids cannot be blank.</Assert>
		</TestCase>
		<TestCase name='targettypeNull'>
			<Assert method="getjsonvalue" param="message.target_type.[0]">target_type cannot be blank.</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='update_practice_status_vip'>
		<TestCase name='test'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
	</TestMethod>
	<TestMethod name='update_practice_status'>
		<TestCase name='test'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
		<TestCase name='puidNotExist'>
			<Assert method="getjsonvalue" param="code">0</Assert>
		</TestCase>
	</TestMethod>
</TestSuite>